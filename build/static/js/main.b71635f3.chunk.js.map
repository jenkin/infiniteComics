{"version":3,"sources":["Fumetto.js","appBar.js","App.js","serviceWorker.js","index.js"],"names":["fumetto","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","movingx","newId","state","id","data","length","newCartoon","setState","x","y","console","log","react_default","a","createElement","onClick","className","style","backgroundImage","src","backgroundPositionX","backgroundPositionY","width","height","React","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","list","fullList","DenseAppBar","side","classes","_React$useState","useState","left","_React$useState2","slicedToArray","toggleDrawer","open","event","type","key","objectSpread","defineProperty","AppBar","position","Toolbar","variant","IconButton","edge","color","aria-label","Menu_default","Typography","SwipeableDrawer","onClose","onOpen","role","onKeyDown","List","component","ListItem","button","alert","ListItemText","primary","infiniteComics","appBar","Fragment","CssBaseline","Container","maxWidth","Fumetto","GasolineAlley","bx","by","zoom","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+bAyDeA,qBArDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,QAAU,WAEN,IACIC,EADQR,EAAKS,MAAMC,GACH,EAEpB,GAAIF,EAAQR,EAAKD,MAAMY,KAAKC,OAAQ,CAEhC,IAAIC,EAAab,EAAKD,MAAMY,KAAKH,GAEjCR,EAAKc,SAAS,CACVJ,GAAIF,EACJO,EAAGF,EAAWE,EACdC,EAAGH,EAAWG,SAKlBhB,EAAKc,SAAS,CACVJ,GAAI,EACJK,EAAGf,EAAKD,MAAMY,KAAK,GAAGI,EACtBC,EAAGhB,EAAKD,MAAMY,KAAK,GAAGK,KA5B9BC,QAAQC,IAAInB,GACZC,EAAKS,MAAQ,CACTC,GAAI,EACJK,EAAGf,EAAKD,MAAMY,KAAK,GAAGI,EACtBC,EAAGhB,EAAKD,MAAMY,KAAK,GAAGK,GANXhB,wEAsCf,OACImB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACAF,EAAAC,EAAAC,cAAA,OAAKC,QAASnB,KAAKI,QAASgB,UAAU,UAAUC,MAAO,CACnDC,gBAAmB,QAAUtB,KAAKJ,MAAM2B,IAAM,KAC9CC,qBAAwBxB,KAAKM,MAAMM,EAAI,KACvCa,qBAAwBzB,KAAKM,MAAMO,EAAI,KACvCa,MAAS,QACTC,OAAU,mBAhDRC,IAAMC,oICUtBC,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaJ,EAAMK,QAAQ,IAE/BC,KAAM,CACFZ,MAAO,KAEXa,SAAU,CACNb,MAAO,WA0EAc,MAtEf,WAEI,IAeiBC,EAfXC,EAAUZ,IAFGa,EAIOf,IAAMgB,SAAS,CACrCC,MAAM,IALSC,EAAAhD,OAAAiD,EAAA,EAAAjD,CAAA6C,EAAA,GAIZrC,EAJYwC,EAAA,GAILnC,EAJKmC,EAAA,GAQbE,EAAe,SAACP,EAAMQ,GAAP,OAAgB,SAAAC,KAE7BA,GAAwB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAIvEzC,EAASb,OAAAuD,EAAA,EAAAvD,CAAA,GAAKQ,EAANR,OAAAwD,EAAA,EAAAxD,CAAA,GAAc2C,EAAOQ,OA2BjC,OACIjC,EAAAC,EAAAC,cAAA,OAAKE,UAAWsB,EAAQT,MACpBjB,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAQC,SAAS,UAEbxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAASC,QAAQ,SAEb1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAYC,KAAK,QAAQzC,QAAS6B,EAAa,QAAQ,GAAO5B,UAAWsB,EAAQP,WAAY0B,MAAM,UAAUC,aAAW,QACpH9C,EAAAC,EAAAC,cAAC6C,EAAA9C,EAAD,OAGJD,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAYN,QAAQ,KAAKG,MAAM,WAA/B,oBAMJ7C,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CACIhB,KAAM3C,EAAMuC,KACZqB,QAASlB,EAAa,QAAQ,GAC9BmB,OAAQnB,EAAa,QAAQ,KA3C5BP,EA6CS,OA3CtBzB,EAAAC,EAAAC,cAAA,OACIE,UAAWsB,EAAQJ,KACnB8B,KAAK,eACLjD,QAAS6B,EAAaP,GAAM,GAC5B4B,UAAWrB,EAAaP,GAAM,IAG9BzB,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAMC,UAAU,OAEZvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAUC,QAAM,EAACtD,QAAS,WAAQuD,MAAM,wDACpC1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAcC,QAAQ,WAG1B5D,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAUrD,QAAS,WAAQuD,MAAM,wDAC7B1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAcC,QAAQ,8CCpC3BC,mLAdP,OACI7D,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4D,EAAD,MACA9D,EAAAC,EAAAC,cAACF,EAAAC,EAAM8D,SAAP,KACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAWC,SAAS,MAChBlE,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACiE,EAAD,CAAS5D,IAAI,YAAYf,KAAM4E,EAAeC,GAAG,IAAIC,GAAG,IAAIC,KAAK,iBARjE3D,IAAMC,WCIf2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b71635f3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass fumetto extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        console.log(props)\r\n        this.state = {\r\n            id: 0,\r\n            x: this.props.data[0].x,\r\n            y: this.props.data[0].y\r\n        }\r\n    }\r\n\r\n    movingx = () => {\r\n\r\n        let oldId = this.state.id,\r\n            newId = oldId + 1;\r\n\r\n        if (newId < this.props.data.length) {\r\n\r\n            let newCartoon = this.props.data[newId];\r\n\r\n            this.setState({\r\n                id: newId,\r\n                x: newCartoon.x,\r\n                y: newCartoon.y\r\n            });\r\n\r\n        } else {\r\n\r\n            this.setState({\r\n                id: 0,\r\n                x: this.props.data[0].x,\r\n                y: this.props.data[0].y\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p></p>\r\n                <div onClick={this.movingx} className=\"cartoon\" style={{\r\n                    \"backgroundImage\": \"url('\" + this.props.src + \"')\",\r\n                    \"backgroundPositionX\": -this.state.x + 'px',\r\n                    \"backgroundPositionY\": -this.state.y + 'px',\r\n                    \"width\": \"210px\",\r\n                    \"height\": \"180px\"\r\n                }}></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default fumetto;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    list: {\r\n        width: 250,\r\n    },\r\n    fullList: {\r\n        width: 'auto',\r\n    },\r\n}));\r\n\r\nfunction DenseAppBar() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = React.useState({\r\n        left: false,\r\n    });\r\n\r\n    const toggleDrawer = (side, open) => event => {\r\n\r\n        if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n            return;\r\n        }\r\n\r\n        setState({ ...state, [side]: open });\r\n    };\r\n\r\n    const sideList = side => (\r\n\r\n        <div\r\n            className={classes.list}\r\n            role=\"presentation\"\r\n            onClick={toggleDrawer(side, false)}\r\n            onKeyDown={toggleDrawer(side, false)}\r\n        >\r\n\r\n            <List component=\"nav\">\r\n\r\n                <ListItem button onClick={() => { alert(\"Qui dovrebbe renderizzare la componente Fumetto.js\"); }} >\r\n                    <ListItemText primary=\"Alley\" />\r\n                </ListItem>\r\n\r\n                <ListItem onClick={() => { alert(\"Qui dovrebbe renderizzare la componente Dipinto.js\"); }}>\r\n                    <ListItemText primary=\"Dipinto\" />\r\n                </ListItem>\r\n\r\n            </List>\r\n\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar variant=\"dense\">\r\n\r\n                    <IconButton edge=\"start\" onClick={toggleDrawer('left', true)} className={classes.menuButton} color=\"inherit\" aria-label=\"Menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"h6\" color=\"inherit\">\r\n                        Infinite Comics\r\n                    </Typography>\r\n\r\n                </Toolbar>\r\n\r\n                <SwipeableDrawer\r\n                    open={state.left}\r\n                    onClose={toggleDrawer('left', false)}\r\n                    onOpen={toggleDrawer('left', true)}\r\n                >\r\n                    {sideList('left')}\r\n                </SwipeableDrawer>\r\n\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DenseAppBar;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Fumetto from './Fumetto';\r\nimport DenseAppBar from './appBar.js'\r\nimport GasolineAlley from './gasoline-alley';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nclass infiniteComics extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <DenseAppBar />\r\n                <React.Fragment>\r\n                    <CssBaseline />\r\n                    <Container maxWidth=\"sm\">\r\n                        <div><Fumetto src='alley.jpg' data={GasolineAlley} bx=\"0\" by=\"0\" zoom=\"1\" /></div>\r\n                    </Container>\r\n                </React.Fragment>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default infiniteComics;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}